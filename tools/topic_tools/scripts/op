#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Created on Fri Aug  9 12:13:00 2013

@author: enriquefernandez
@todo: support non-scalar output types (requires defining a syntax for the expression, maybe YAML)

Allows to take a topic or one of it fields and output it on another topic
after performing a valid python operation (including numpy).

The operations are done on the message, which is taken in the variable 'm'.

* Some examples:
$ rosrun topic_tools op /imu/orientation/x /x_in_degrees std_msgs/Float64 '-rad2deg(m)'
$ rosrun topic_tools op /imu/orientation /norm std_msgs/Float64 'sqrt(sum(array([m.x, m.y, m.z, m.w])))'
"""

import roslib
import rospy
import rostopic

import sys

from numpy import *

class TopicOp:

    def __init__( self ):
        if len( sys.argv ) < 4:
            sys.exit( 'Usage: %s <input> <output topic> <output type> [<expression on m>]' % sys.argv[0] )

        self.input        = sys.argv[1]
        self.output_topic = sys.argv[2]
        self.output_type  = sys.argv[3]
        self.expression   = sys.argv[4] if len( sys.argv ) > 4 else 'm'

        # We need the class, rather than the type,
        # so we use get_topic_class instead of get_topic_type.
        self.input_class, self.input_topic, self.input_fn = rostopic.get_topic_class( self.input )
        self.output_class = roslib.message.get_message_class( self.output_type )

        self.sub = rospy.Subscriber( self.input_topic, self.input_class, self.callback )
        self.pub = rospy.Publisher( self.output_topic, self.output_class )

    def callback( self, msg ):
        if self.input_fn is not None:
            m = self.input_fn( msg )
        else:
            m = msg

        res = eval( self.expression )
        self.pub.publish( res )


if __name__ == '__main__':

    rospy.init_node('op', anonymous=True)

    x = TopicOp()

    while not rospy.is_shutdown():
        rospy.spin()

