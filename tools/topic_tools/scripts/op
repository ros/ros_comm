#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
@author: enriquefernandez
@todo: support non-scalar output types (requires defining a syntax for the expression, maybe YAML)

Allows to take a topic or one of it fields and output it on another topic
after performing a valid python operation (including numpy).

The operations are done on the message, which is taken in the variable 'm'.

* Some examples:
$ rosrun topic_tools op /imu/orientation/x /x_in_degrees std_msgs/Float64 '-rad2deg(m)'
$ rosrun topic_tools op /imu/orientation /norm std_msgs/Float64 'sqrt(sum(array([m.x, m.y, m.z, m.w])))'
"""

import roslib
import rospy
import rostopic

import argparse

# Allow for numpy operations in the given expression
from numpy import *

class TopicOp:

    def __init__(self):
        parser = argparse.ArgumentParser(
            formatter_class=argparse.RawTextHelpFormatter,
            description='Apply a Python operation to a topic.\n\n'
                        'Usage:\n\trosrun topic_tools op '
                        '<input> <output topic> <output type> '
                        '[<expression on m>]\n\n'
                        'Example:\n\trosrun topic_tools op /imu/orientation '
                        '/norm std_msgs/Float64 '
                        '\'sqrt(sum(array([m.x, m.y, m.z, m.w])))\'')
        parser.add_argument('input', help='Input topic or topic field.')
        parser.add_argument('output_topic', help='Output topic.')
        parser.add_argument('output_type', help='Output topic type.')
        parser.add_argument('expression', default='m',
                help='Python expression to apply on the input message \'m\'.')

        args = parser.parse_args()

        self.expression = args.expression

        input_class, input_topic, self.input_fn = rostopic.get_topic_class(args.input)
        output_class = roslib.message.get_message_class(args.output_type)

        self.sub = rospy.Subscriber(input_topic, input_class, self.callback)
        self.pub = rospy.Publisher(args.output_topic, output_class)

    def callback(self, msg):
        if self.input_fn is not None:
            m = self.input_fn(msg)
        else:
            m = msg

        res = eval(self.expression)
        self.pub.publish(res)


if __name__ == '__main__':

    rospy.init_node('op', anonymous=True)

    app = TopicOp()

    while not rospy.is_shutdown():
        rospy.spin()

